- return unless note.author
- return if note.cross_reference_not_visible_for?(current_user)

- note_editable = note_editable?(note)
%li.timeline-entry{ id: dom_id(note), class: ["note", "note-row-#{note.id}", ('system-note' if note.system)], data: {author_id: note.author.id, editable: note_editable, note_id: note.id} }
  .timeline-entry-inner
    .timeline-icon
      - if note.system
        = icon_for_system_note(note)
      - else
        %a{ href: user_path(note.author) }
          = image_tag avatar_icon(note.author), alt: '', class: 'avatar s40'
    .timeline-content
      .note-header
        %a.visible-xs{ href: user_path(note.author) }
          = note.author.to_reference
        = link_to_member(note.project, note.author, avatar: false, extra_class: 'hidden-xs')
        .note-headline-light
          %span.hidden-xs
            = note.author.to_reference
          - unless note.system
            commented
          - if note.system
            %span.system-note-message
              = note.redacted_note_html
          %a{ href: "##{dom_id(note)}" }
            = time_ago_with_tooltip(note.created_at, placement: 'bottom', html_class: 'note-created-ago')
        - unless note.system?
          .note-actions
            - access = note_max_access_for_user(note)
            - if access
              %span.note-role= access

            - if note.resolvable?
              - can_resolve = can?(current_user, :resolve_note, note)
              %resolve-btn{ "project-path" => project_path(note.project),
                  "discussion-id" => note.discussion_id,
                  ":note-id" => note.id,
                  ":resolved" => note.resolved?,
                  ":can-resolve" => can_resolve,
                  ":author-name" => "'#{j(note.author.name)}'",
                  "author-avatar" => note.author.avatar_url,
                  ":note-truncated" => "'#{j(truncate(note.note, length: 17))}'",
                  ":resolved-by" => "'#{j(note.resolved_by.try(:name))}'",
                  "v-show" => "#{can_resolve || note.resolved?}",
                  "inline-template" => true,
                  "ref" => "note_#{note.id}" }

                %button.note-action-button.line-resolve-btn{ type: "button",
                    class: ("is-disabled" unless can_resolve),
                    ":class" => "{ 'is-active': isResolved }",
                    ":aria-label" => "buttonText",
                    "@click" => "resolve",
                    ":title" => "buttonText",
                    "v-show" => "!loading",
                    ":ref" => "'button'" }
                  = icon("spin spinner", "v-show" => "loading")

                  = render "shared/icons/icon_status_success.svg"

            - if current_user
              - if note.emoji_awardable?
                = link_to '#', title: 'Award Emoji', class: 'note-action-button note-emoji-button js-add-award js-note-emoji', data: { position: 'right' } do
                  = icon('spinner spin')
                  %span{ class: "link-highlight award-control-icon-neutral" }= custom_icon('emoji_slightly_smiling_face')
                  %span{ class: "link-highlight award-control-icon-positive" }= custom_icon('emoji_smiley')
                  %span{ class: "link-highlight award-control-icon-super-positive" }= custom_icon('emoji_smile')

              - if note_editable
                = link_to '#', title: 'Edit comment', class: 'note-action-button js-note-edit' do
                  = icon('pencil', class: 'link-highlight')
                = link_to namespace_project_note_path(note.project.namespace, note.project, note), title: 'Remove comment', method: :delete, data: { confirm: 'Are you sure you want to remove this comment?' }, remote: true, class: 'note-action-button js-note-delete danger' do
                  = icon('trash-o', class: 'danger-highlight')
      .note-body{ class: note_editable ? 'js-task-list-container' : '' }
        .note-text.md
          = preserve do
            = note.redacted_note_html
        = edited_time_ago_with_tooltip(note, placement: 'bottom', html_class: 'note_edited_ago', include_author: true)
        - if note_editable
          .original-note-content.hidden{ data: { post_url: namespace_project_note_path(@project.namespace, @project, note), target_id: note.noteable.id, target_type: note.noteable.class.name.underscore } }
            #{note.note}
          %textarea.hidden.js-task-list-field.original-task-list{ data: {update_url: namespace_project_note_path(@project.namespace, @project, note) } }= note.note
        .note-awards
          = render 'award_emoji/awards_block', awardable: note, inline: false
        - if note.system
          .system-note-commit-list-toggler
            Toggle commit list
            %i.fa.fa-angle-down
      - if note.attachment.url
        .note-attachment
          - if note.attachment.image?
            = link_to note.attachment.url, target: '_blank' do
              = image_tag note.attachment.url, class: 'note-image-attach'
          .attachment
            = link_to note.attachment.url, target: '_blank' do
              = icon('paperclip')
              = note.attachment_identifier
              = link_to delete_attachment_namespace_project_note_path(note.project.namespace, note.project, note),
                title: 'Delete this attachment', method: :delete, remote: true, data: { confirm: 'Are you sure you want to remove the attachment?' }, class: 'danger js-note-attachment-delete' do
                = icon('trash-o', class: 'cred')
